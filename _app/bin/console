#!/usr/bin/env php
<?php
require __DIR__ . '/../vendor/autoload.php';

use PHPNE\Console;

$container = new Console\Container;

$container->set('configuration', $container->share(function($container) {
    return new Console\Configuration(array(
        'view.path'         => realpath(__DIR__ . '/../views'),
        'page.path'         => realpath(__DIR__ . '/../views/pages'),
        'page.save.path'    => realpath(__DIR__ . '/../..'),
        'post.path'         => realpath(__DIR__ . '/../views/pages/posts'),
        'post.save.path'    => realpath(__DIR__ . '/../../posts'),
    ));
}));

$container->set('twig', $container->share(function($container) {
    $twig = new Twig_Environment(
        new Twig_Loader_Filesystem(array(
            $container->get('configuration')->get('view.path'),
            $container->get('configuration')->get('page.path'),
            $container->get('configuration')->get('post.path'),
        ))
    );
    
    $twig->addExtension(new Aptoma\Twig\Extension\MarkdownExtension(
        new dflydev\markdown\MarkdownParser
    ));
    
    return $twig;
}));

$container->set('page.repository', $container->share(function($container) {
    return new PHPNE\Entity\Repository\PageRepository(
        $container->get('configuration')->get('page.path')
    );
}));

$container->set('page.renderer', $container->share(function($container) {
    return new PHPNE\Entity\Renderer\PageRenderer($container->get('twig'));
}));

$container->set('page.writer', $container->share(function($container) {
    return new PHPNE\Entity\Writer\PageWriter(
        $container->get('configuration')->get('page.save.path')
    );
}));

$container->set('post.repository', $container->share(function($container) {
    return new PHPNE\Entity\Repository\PostRepository(
        $container->get('configuration')->get('post.path')
    );
}));

$container->set('post.renderer', $container->share(function($container) {
    return new PHPNE\Entity\Renderer\PostRenderer($container->get('twig'));
}));

$container->set('post.writer', $container->share(function($container) {
    return new PHPNE\Entity\Writer\PostWriter(
        $container->get('configuration')->get('post.save.path')
    );
}));

$console = new Console\Application($container);
$console->add(new Console\Command\GeneratePagesCommand);
$console->add(new Console\Command\GeneratePostsCommand);
$console->add(new Console\Command\GenerateAllCommand);
$console->run();